<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何成为比奇堡公敌</title>
    <url>/2020/07/19/BottomFish/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>静态博客有很多优点，但是想要更好的效果则需要折腾一下。</p>
<p>效果就在页脚，那么如何实现养鱼呢？下文简单的介绍一下在Butterfly主题中，引入养鱼js的方法。</p>
<h2 id="如何在页脚养鱼？"><a href="#如何在页脚养鱼？" class="headerlink" title="如何在页脚养鱼？"></a>如何在页脚养鱼？</h2><p>源码已全部打包上传CDN，只需在配置文件引导即可调用。</p>
<ul>
<li><p>在<code>themes/butterfly</code>的<code>_config.yml</code>文件中引导页脚养鱼js：</p>
<p><a href="https://cdn.jsdelivr.net/gh/magidrag0n/CDN/fishes.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/magidrag0n/CDN/fishes.js</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel="stylesheet" href="/xxx.css"&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src="https://cdn.jsdelivr.net/gh/magidrag0n/CDN/fishes.js"&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># - &lt;script src="xxxx"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在<code>themes/butterfly/source/css/_layout/footer.styl</code>调整主题的页脚阴影透明度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-color: alpha($dark-black, .1)  &#x2F;&#x2F;.5改成.1</span><br></pre></td></tr></table></figure>
</li>
<li><pre><code class="commonlisp">hexo clean
hexo d -g
hexo s</code></pre>
<p>至此你就可以看到鱼生生不息地在你的鱼塘里翻滚啦！！！</p>
<p>感谢木槿指导，不然我也成为不了鱼塘霸主，哈哈哈。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>博客美化</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>711全世界都在早起听Eason</title>
    <url>/2020/07/11/BusyAndMusic/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Eason-Live-is-so-much-better-with-Music"><a href="#Eason-Live-is-so-much-better-with-Music" class="headerlink" title="Eason Live is so much better with Music"></a>Eason Live is so much better with Music</h1><h2 id="线上慈善音乐会-有了音乐生活更美好-Eason"><a href="#线上慈善音乐会-有了音乐生活更美好-Eason" class="headerlink" title="线上慈善音乐会:有了音乐生活更美好, Eason."></a>线上慈善音乐会:有了音乐生活更美好, Eason.</h2><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/Eason.jpg" width=742/>

<h3 id="bilibili完整录像-视频已掉，请上Youtube查看哦"><a href="#bilibili完整录像-视频已掉，请上Youtube查看哦" class="headerlink" title="bilibili完整录像(视频已掉，请上Youtube查看哦~)"></a>bilibili完整录像(视频已掉，请上Youtube查看哦~)</h3><iframe width=256 src="//player.bilibili.com/player.html?aid=883769547&bvid=BV1YK4y1s7uK&cid=211145735&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<blockquote>
<p>&nbsp;&nbsp;原来全世界都在早起看陈奕迅。从《与你常在》《天使的礼物》《黄金时代》《太阳照常升起》到《相信你的人》，他难得话很少，而他想说的话，大概都放进了今天早上的这份歌单了。黄金广场内分手的人，有没有在时代门外再聚？看着曾经天天路过的K11 Amuse尖沙咀海傍，维港那边天色也慢慢亮起来，而我们最喜爱的陈奕迅，依旧像他十八岁时那样生猛，旁若无人地毫无代价地，站在街头唱最幸福的歌。</p>
</blockquote>
<hr>
<h2 id="遥远的香港第一印象-维多利亚"><a href="#遥远的香港第一印象-维多利亚" class="headerlink" title="遥远的香港第一印象-维多利亚"></a>遥远的香港第一印象-维多利亚</h2><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/img_1677.jpg" width=742/>
]]></content>
      <tags>
        <tag>LifeBlog</tag>
        <tag>Eason</tag>
      </tags>
  </entry>
  <entry>
    <title>MagiBlockchain</title>
    <url>/2020/07/19/MagiBlockchain/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MagiBlockchain"><a href="#MagiBlockchain" class="headerlink" title="MagiBlockchain"></a>MagiBlockchain</h1><p>项目类型：区块链</p>
<p>实现方法：Java , Python</p>
<p>成立时间：2020-02-21</p>
<p>项目进度：画饼阶段</p>
<img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/MagiBlockchain2.png"  />

<hr>
<h2 id="听首歌吧"><a href="#听首歌吧" class="headerlink" title="听首歌吧"></a>听首歌吧</h2><blockquote>
<p><strong>(注意音量哦)</strong></p>
</blockquote>

        <div id="aplayer-alEhEraa" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-alEhEraa"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "Farewell",
              author: "Jordy Chandra",
              url: "http://music.163.com/song/media/outer/url?id=1452663185.mp3",
              pic: "http://p2.music.126.net/dTxZv7o-YUmYyaTOddQkmw==/109951165033726623.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>



<h2 id="区块链的概念"><a href="#区块链的概念" class="headerlink" title="区块链的概念"></a>区块链的概念</h2><blockquote>
<p>区块链(Blockchain)，顾名思义就是由区块构成的链条。每个区块存储相应的信息，起初是用来给电子文档做标记，同时记录每一次变动，避免了在记录过程、传播过程中的篡改行为。<em>从本质上讲，他是一个共享数据库，存储于其中的数据或信息，具有“不可伪造”“全程留痕”“可以追溯”“公开透明”“集体维护”等特征。</em></p>
<p>哈希函数(Hash Function)：通过算法(MD5, SHA-256等)，将任意长度的数据映射为唯一指定的数据。</p>
</blockquote>
<h3 id="独立区块包含的内容"><a href="#独立区块包含的内容" class="headerlink" title="独立区块包含的内容"></a>独立区块包含的内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BuildBlock[x,y,z] (data, hash.(data), preBlock.hash) &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>执行产生区块，传入数据(data)，计算数据的哈希值(hash.(data))，同时确定在区块链中对应前一个位置的区块哈希值（祖先区块无前区块）。哈希函数的唯一性，保证了传入数据与哈希值的对应。如果任一区块的数据遭到篡改，其哈希值必然改变，无法让后方区块正确对应，产生断链，这也维护了区块的完整性和安全性。</p>
<h3 id="区块链的结构示意-MD5算法"><a href="#区块链的结构示意-MD5算法" class="headerlink" title="区块链的结构示意(MD5算法)"></a>区块链的结构示意(MD5算法)</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">区块1</th>
<th align="center">区块2</th>
<th align="center">区块3</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数据</td>
<td align="center">Magi</td>
<td align="center">Blockchain</td>
<td align="center">MagiBlockchain</td>
</tr>
<tr>
<td align="center">哈希值</td>
<td align="center">05eca2fddfa96f488ee9e09424be27a9</td>
<td align="center">3cc377f79bda308c750459a2caf7fc38</td>
<td align="center">c354eaabcab7d52760659f6538687b37</td>
</tr>
<tr>
<td align="center">前哈希值</td>
<td align="center"></td>
<td align="center">05eca2fddfa96f488ee9e09424be27a9</td>
<td align="center">3cc377f79bda308c750459a2caf7fc38</td>
</tr>
</tbody></table>
<ul>
<li><p>区块的数据哈希值是唯一的</p>
</li>
<li><p>区块的前一个区块是唯一的</p>
</li>
<li><p>当发生了数据篡改，<code>Blockchain</code> → <code>blockchain</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hash.(Blockchain): 3cc377f79bda308c750459a2caf7fc38</span><br><span class="line">Hash.(blockchain): 5510a843bc1b7acb9507a5f71de51b98</span><br></pre></td></tr></table></figure>

<p>可以观察到，即便是一个大小写的变化，都让数据的哈希值发生了<strong>极大</strong>的改变。同时让原来的后区块失去了对应的前区块哈希值的对应关系，产生了<strong>断链</strong>。为什么敢于说区块链能避免数据篡改？如果拥有超强的算力，能够通过算力修改所有区块的数据及哈希值的话，是不是区块链就不安全了呢？</p>
<p><strong>并不是！</strong></p>
<p>区块链中还引入了<strong><em>工作量验证机制(Proof of Work)</em></strong>以及<strong><em>P2P(Peer to Peer)验证机制</em></strong>。</p>
<p>即基于<strong>总体</strong>算力决定验算工作量大小，基于<strong>总体</strong>互信控制数据唯一、安全。</p>
</li>
</ul>
<h2 id="比特币是如何产生的"><a href="#比特币是如何产生的" class="headerlink" title="比特币是如何产生的"></a>比特币是如何产生的</h2><p>To Be Done</p>
<h2 id="简单区块链的实现"><a href="#简单区块链的实现" class="headerlink" title="简单区块链的实现"></a>简单区块链的实现</h2><p>To Be Done</p>
<h2 id="工作量证明机制-POW"><a href="#工作量证明机制-POW" class="headerlink" title="工作量证明机制(POW)"></a>工作量证明机制(POW)</h2><p>工作量证明机制(Proof of Work)</p>
<p>To Be Done</p>
<h2 id="POW的整合"><a href="#POW的整合" class="headerlink" title="POW的整合"></a>POW的整合</h2><p>To Be Done</p>
<h2 id="比特币中的数字签名"><a href="#比特币中的数字签名" class="headerlink" title="比特币中的数字签名"></a>比特币中的数字签名</h2><p>To Be Done</p>
<h2 id="向MagiBlockchain添加数字签名"><a href="#向MagiBlockchain添加数字签名" class="headerlink" title="向MagiBlockchain添加数字签名"></a>向MagiBlockchain添加数字签名</h2><p>To Be Done</p>
]]></content>
      <tags>
        <tag>Blockchain</tag>
        <tag>区块链</tag>
        <tag>Java</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>十分钟建站并上线</title>
    <url>/2020/07/16/HexoBlog-OnlineInTen/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>看到我的小小博客，或者看到很多大大的博客，你是不是也心动了！也想试试自己建站了呢？</p>
<p>Very Easy！和我一起利用十分钟建立属于你的网站并上线吧！</p>
<hr>
<h1 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h1><ul>
<li>Github 账号 x1</li>
<li>cmd, nodejs, npm, git</li>
</ul>
<hr>
<h1 id="前期环境准备"><a href="#前期环境准备" class="headerlink" title="前期环境准备"></a>前期环境准备</h1><ul>
<li><h3 id="Github-账号的注册："><a href="#Github-账号的注册：" class="headerlink" title="Github 账号的注册："></a>Github 账号的注册：</h3><p>进入<a href="https://github.com/" target="_blank" rel="noopener">Github(点击跳转)</a>并注册一个账号</p>
</li>
<li><h3 id="命令行功能检查："><a href="#命令行功能检查：" class="headerlink" title="命令行功能检查："></a>命令行功能检查：</h3><p>Windows键 + R键，在打开的窗口输入<code>cmd</code>并回车，打开的应用便是命令行</p>
</li>
<li><h3 id="安装-node-js与检查npm包管理器-："><a href="#安装-node-js与检查npm包管理器-：" class="headerlink" title="安装 node.js与检查npm包管理器 ："></a>安装 node.js与检查npm包管理器 ：</h3><p>进入<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">nodejs官网(点击跳转)</a>下载最新的长期支持版（LTS）并安装</p>
<p>安装完毕后在命令行中输入 <code>node -v</code>，检查是否成功安装</p>
<p>在命令行中输入npm -v，检查npm包管理器是否存在</p>
</li>
<li><h3 id="非必需-将npm包管理器调整到国内镜像："><a href="#非必需-将npm包管理器调整到国内镜像：" class="headerlink" title="(非必需)将npm包管理器调整到国内镜像："></a>(非必需)将npm包管理器调整到国内镜像：</h3><p>由于npm服务器位于国外，部分用户可能网络体验较差</p>
<p>国内有清华大学镜像以及阿里淘宝镜像两个优质线路可选</p>
<p>下面我们选择调整为阿里淘宝镜像</p>
<p>在命令行中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>并等待完成，完成后输入<code>cnpm -v</code>检查是否成功安装</p>
</li>
<li><h3 id="安装hexo博客框架："><a href="#安装hexo博客框架：" class="headerlink" title="安装hexo博客框架："></a>安装hexo博客框架：</h3><p>首先将命令行当前文件夹切换到一个新的空文件夹(不建议中文)当中</p>
<p>然后在命令行中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli  （未调整镜像输入这个）</span><br><span class="line"></span><br><span class="line">cnpm install -g hexo-cl  （调整了镜像输入这个）</span><br></pre></td></tr></table></figure>

<p>进度跑完以后，输入<code>hexo -v</code>检查是否安装成功</p>
<p><u><strong>后文若未特别说明，均默认命令行处于当前文件夹中操作</strong></u></p>
</li>
</ul>
<ul>
<li><h3 id="安装Git推送套件："><a href="#安装Git推送套件：" class="headerlink" title="安装Git推送套件："></a>安装Git推送套件：</h3><p>在命令行中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git  （未调整镜像输入这个）</span><br><span class="line">  cnpm install --save hexo-deployer-git （调整了镜像输入这个）</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>  Tips：安装完成后会有一项Warning提醒，不用担心，敬请忽略</p>
<hr>
<h1 id="Hexo本地建站"><a href="#Hexo本地建站" class="headerlink" title="Hexo本地建站"></a>Hexo本地建站</h1><ul>
<li><h3 id="快速开始："><a href="#快速开始：" class="headerlink" title="快速开始："></a>快速开始：</h3><p>在命令行中输入：</p>
<p><code>hexo init</code></p>
<p>此步骤会自动克隆一个Landscape的主题博客</p>
<p>并且你将在你的博客目录下看到自动生成的文件</p>
</li>
<li><h3 id="启动本地博客服务器："><a href="#启动本地博客服务器：" class="headerlink" title="启动本地博客服务器："></a>启动本地博客服务器：</h3><p>在命令行中输入：</p>
<p><code>hexo s</code></p>
<p>将会提示你：</p>
<p><code>INFO  Start processing.</code><br><code>INFO  Hexo is running at http://localhost:4000.Press Ctrl+C to stop.</code></p>
<p>此时在浏览器中输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 便可查看你的博客！</p>
<p>其中的博文便包含了一些简易的操作指令与讲解</p>
<p><strong>恭喜！你已经迈出了令人愉快的第一步！</strong></p>
</li>
</ul>
<hr>
<h1 id="Hexo的Github上线"><a href="#Hexo的Github上线" class="headerlink" title="Hexo的Github上线"></a>Hexo的Github上线</h1><p>我们刚才建立的网站只能在你使用的电脑中查看，即便拿出手机输入相同网址亦是不能查看的。我们需要让好朋友们看到我们的网站，就需要将博客服务器从本地局域服务器推送到云端服务器，让所有人都可以访问。好消息是作为一名程序员，整个互联网都对你很温柔，尤其是全球第一大程序员交友网站<a href="https://github.com" target="_blank" rel="noopener">Github</a>提供了免费的静态页面服务器与强大的图床支持（图床可能另开一版讲）。我们一起来操作吧！</p>
<ul>
<li><h3 id="Github账户创建一个项目"><a href="#Github账户创建一个项目" class="headerlink" title="Github账户创建一个项目"></a>Github账户创建一个项目</h3><p>使用你刚才创建的Github账户，在主页右上角找到新建项目<strong>New repository</strong></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/guide1.png" alt=""></p>
<p>并建立一个与你名称相同前缀的项目名<strong>(YourName.github.io)</strong></p>
<p>此处因为我已经创建过所以不能重复创建，你可直接点<strong>Create repository</strong></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/guide2.png" alt=""></p>
</li>
</ul>
<ul>
<li><h3 id="配置Git推送套件"><a href="#配置Git推送套件" class="headerlink" title="配置Git推送套件"></a>配置Git推送套件</h3><p>打开你创建的博客目录文件夹，找到_config.yml这个文件并打开编辑</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/guide3.png" alt=""></p>
<p>在代码末尾添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  	<span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">	<span class="attr">repo:</span> <span class="string">"https://github.com/你的名字/你的名字.github.io.git"</span></span><br><span class="line">  	<span class="attr">branch:</span> <span class="string">"master"</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/guide4.png" alt=""></p>
<p>至此Git推送套件已准备就绪</p>
<ul>
<li><h3 id="测试Git推送套件"><a href="#测试Git推送套件" class="headerlink" title="测试Git推送套件"></a>测试Git推送套件</h3><p>在命令行中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;(你的Github邮箱)</span><br><span class="line">git config --global user.name &quot;Your Name&quot;(你的Github名称)</span><br></pre></td></tr></table></figure>

<p>在命令行中输入：</p>
<p><code>hexo d</code></p>
<p>此时会哗啦啦流淌一行行提示，并会让你输入你的Github名称与密码</p>
<p>当提示结束时，便可进入网页 你的名称.github.io 查看你的博客啦！</p>
<p><strong>恭喜你！你已经迈出了令人愉快的第二步！</strong></p>
<p><strong>剩下的路你可大胆摸索！大胆创作！</strong></p>
<p><strong>请记得<code>hexo d -g</code>让我们看见！</strong></p>
</li>
</ul>
<hr>
<h1 id="Hexo主题的个性化"><a href="#Hexo主题的个性化" class="headerlink" title="Hexo主题的个性化"></a>Hexo主题的个性化</h1><ul>
<li>这是个相当主观、个性的内容，我无意引导各位的审美取向。</li>
<li>还请各位自行百度，Google个性主题定制教程哦~</li>
<li>大家比我懂美多啦！</li>
<li><strong>欢迎下方评论区留下你的博客地址<del>~</del></strong></li>
</ul>
<hr>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul>
<li><h3 id="博客内容的倡议"><a href="#博客内容的倡议" class="headerlink" title="博客内容的倡议"></a>博客内容的倡议</h3><p>不能传播危害国家安全，泄露国家秘密，颠覆国家政权，破坏国家统一的内容。</p>
<p>不能散布谣言，扰乱社会秩序，破坏社会稳定。</p>
<p>不能散布淫秽、色情、赌博、暴力、凶杀、恐怖或者教唆犯罪。</p>
<p>不能侮辱或者诽谤他人，侵害他人合法权益。</p>
<p>——《互联网信息服务管理办法》节选</p>
<h4 id="我们要约束自己的行为，因为这关乎所有人的互联网自由。"><a href="#我们要约束自己的行为，因为这关乎所有人的互联网自由。" class="headerlink" title="我们要约束自己的行为，因为这关乎所有人的互联网自由。"></a><strong>我们要约束自己的行为，因为这关乎所有人的互联网自由。</strong></h4></li>
<li><h3 id="博客访问地址"><a href="#博客访问地址" class="headerlink" title="博客访问地址"></a>博客访问地址</h3><p><a href="https://localhost:4000" target="_blank" rel="noopener">https://localhost:4000</a>  (本地服务器开启可访问)</p>
<p><a href="">YourName.github.io</a>  (随时随地访问最近一次推送版本的博客)</p>
</li>
<li><h3 id="常用Hexo指令"><a href="#常用Hexo指令" class="headerlink" title="常用Hexo指令"></a>常用Hexo指令</h3><p><strong>hexo clean</strong> (清除缓存)<br><strong>hexo g</strong> (迭代博客内容，每次编辑后操作)<br><strong>hexo d</strong> (推送至github服务器)<br><strong>hexo new page “XXX”</strong> (新建一个名为XXX的页面)<br><strong>hexo new “title”</strong> (新建一个名为title的文章)<br>etc…`</p>
</li>
<li><h3 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h3><p>如果有任何不甚明白的地方，欢迎下方留言提问。</p>
<p>亦可Email （<a href="mailto:magidragon@foxmail.com">magidragon@foxmail.com</a>）联系我</p>
<p><strong>期待高效交流，教学相长！</strong></p>
</li>
</ul>
<hr>
<p>2020 年 7 月 16 日 凌晨 1：20 完稿</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>懒人一键生成世界大同的Logo</title>
    <url>/2020/07/18/LazyLogo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在互联网冲浪多年的你，会不会常常为做封面、做Logo而头疼？这一次你可以真正阅后即会！</p>
<p>以下推荐的Logo风格在我看来，或是世界大同的、或是设计精巧的、亦会是引人忍俊不禁的。</p>
<hr>
<h2 id="http-textcraft-net"><a href="#http-textcraft-net" class="headerlink" title="http://textcraft.net/"></a><strong><a href="http://textcraft.net/" target="_blank" rel="noopener">http://textcraft.net/</a></strong></h2><p>这是一款8-bit风格字体Logo生成器，支持定制材质、艺术字体。玩过MineCraft的你一定不会感到陌生。</p>
<p>我想说一句，Creeper?</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/textcraft.png" alt=""></p>
<hr>
<h2 id="https-www-logomaker-com-cn"><a href="#https-www-logomaker-com-cn" class="headerlink" title="https://www.logomaker.com.cn/"></a><strong><a href="https://www.logomaker.com.cn/" target="_blank" rel="noopener">https://www.logomaker.com.cn/</a></strong></h2><p>这是一款大数据学习下定制Logo的网站，仅需输入名称、行业便可自动生成十几个Logo，其中包括了可直接商用的Logo。同时该网站支持个性化编辑和源文件下载，如果你钞能力十足甚至可以专属私人订制！</p>
<blockquote>
<p>不可避免的是，大数据也存在不完美、不人性的地方。在不充足的机器学习与Logo资源之下，这很容易导致同质化，换句话说就是大家长得好像都一样，你是李逵还是李鬼。<strong>—大数据人工智能专家 沃兹基索德</strong></p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/logomaker.png" alt=""></p>
<hr>
<h2 id="https-www-logoko-com-cn"><a href="#https-www-logoko-com-cn" class="headerlink" title="https://www.logoko.com.cn/"></a><strong><a href="https://www.logoko.com.cn/" target="_blank" rel="noopener">https://www.logoko.com.cn/</a></strong></h2><p>相比较第二款，这款则是专注于提供素材的DIY网站。内置许多精美的字体、图片素材，可以直接下载使用。可惜美中不足的是并不支持矢量源文件的下载，只支持成品导出。</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/logoko.png" alt=""></p>
<hr>
<h2 id="https-www-logoly-pro"><a href="#https-www-logoly-pro" class="headerlink" title="https://www.logoly.pro/"></a><strong><a href="https://www.logoly.pro/" target="_blank" rel="noopener">https://www.logoly.pro/</a></strong></h2><p>这是一个Github上很热门的开源项目。收获5.1k个Star。应该是出于快速上线的考量，采用的是Vue为主的开发。</p>
<p>功能怎么样呢？我只能说，懂的都懂好吧！</p>
<p>上手非常简单，这种风格的Logo只需文字、底色便可完成设计。</p>
<p><strong>什么叫国际大同设计啊（战术后仰）</strong></p>
<blockquote>
<p>备注：Github是全球最大的程序员交友网站，什么？你问我P开头的，你很危险！</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/post3_img.png" alt=""></p>
<p>此情此景，我想唱诗一首：<strong><em>秋名山上行人稀，常有车手较高低，赛车跑道今犹在，不见当年老司机。</em></strong></p>
<p>最后，提醒一下广大<strong><del>司机</del></strong>朋友们，请一定一定确认是否符合商用条件。</p>
]]></content>
      <tags>
        <tag>Logo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 知识点复习</title>
    <url>/2020/07/18/JavaReview/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>软件工程专业第一门语言学的是Java，要是没学好，只能下辈子注意点了。</p>
<p>在这里记录一些学习Java的笔记吧。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>Java对大小写很敏感</li>
<li>类名必须以字母开头，后面可以跟字母、数字，亦可以使用 _ 和 $ 两种符号。明确的是，不能使用Java已经存在的保留名（标准类名：以大写字母开头，如果类名由多个单词组成，每个分单词首字母应大写）</li>
<li>源代码文件名必须与公共类的名字相同</li>
<li>为了使代码能够正确执行，必须包含一个main方法</li>
</ol>
<h2 id="Java中的三种注释"><a href="#Java中的三种注释" class="headerlink" title="Java中的三种注释"></a>Java中的三种注释</h2><ol>
<li>单行注释 （//）</li>
<li>多行注释 （/* */）</li>
<li>多行注释 可以自动生成文档 （/** */）</li>
</ol>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center"></th>
<th align="center">存储能力</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">boolean</td>
<td align="center"></td>
<td align="center">1 byte (8 bit)</td>
<td align="center">true, false</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center"></td>
<td align="center">2 byte (16 bit)</td>
<td align="center">-128 ~ 127</td>
</tr>
<tr>
<td align="center">byte</td>
<td align="center">整型</td>
<td align="center">1 byte (8bit)</td>
<td align="center">-128 ~ 127</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">整型</td>
<td align="center">2 byte (16 bit)</td>
<td align="center">-32 768 ~ 32 767 <br/>(-215 ~ 215-1)</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">整型</td>
<td align="center">4 byte (32 bit)</td>
<td align="center">-2 147 483 648 ~ 2 147 483 647 <br/>(-231 ~ 231-1)</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">整型</td>
<td align="center">8 byte (64 bit)</td>
<td align="center">-9 223 372 036 854 776 808 ~ 9 223 372 036 854 775 807<br/>(-263 ~ 263-1)</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">浮点型</td>
<td align="center">4 byte (32 bit)</td>
<td align="center">大约 ±3.402 823 47E + 38F (有效位数为 6~7 位)</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">浮点型</td>
<td align="center">8 byte (64 bit)</td>
<td align="center">大约 ±1.797 693 134 862 315 70E + 308 (有效位数为 15 位)</td>
</tr>
</tbody></table>
<ol>
<li>长整数有一个后缀 <strong>L</strong> （如 40000000000L）</li>
<li>十六进制数值有一个后缀 <strong>0x</strong> （如 0xCAFE）</li>
<li>八进制有一个前缀 <strong>0</strong> （如 020）</li>
<li>二进制有一个前缀 <strong>0b</strong> （如 0b1111）</li>
<li>Float 类型的数值有一个后缀 <strong>F</strong> （如 3.141F）</li>
</ol>
<h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>final 关键字表示变量只能被赋值一次，一旦被赋值后，就不能被更改。</p>
<blockquote>
<p>老大说，以后谁再用double定义奖品金额，就卷铺盖走人。 ——CodeSheep</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Final <span class="keyword">double</span> Cat = <span class="number">5.55</span>;</span><br></pre></td></tr></table></figure>

<p>如果希望某个常量可以在一个类中的多个方法中被使用，称这个常量为类常量。可以使用关键字 static final 设置一个类常量，定义的位置在 main方法的外部。因此，同一个类的其他方法中也可以使用这个常量。如果一个常量被声明为 public ，那么其他类的方法也可以使用这个常量。</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>在Java中，算数运算符可以用 + - * / 来代表加减乘除。</p>
<p>当参与除法运算（/）的两个操作数为整数时，表示整数除法，答案为整数。否则，表示浮点除法。</p>
<p>求余数可以用 %</p>
<p>例如 10%3 = 1，10%3.0 = 1.0</p>
<p>注意：整数除以0会产生一个异常，而浮点数除以0将会得到无穷大或者NaN的结果。</p>
<h2 id="i-和-i的区别"><a href="#i-和-i的区别" class="headerlink" title="i++和++i的区别"></a>i++和++i的区别</h2><ol>
<li><p>如果只是看 i++ 和 ++i ，这两者是等价的，结果等效  i=i+1 ，均为变量自增1</p>
</li>
<li><p>在一般情况下，他们都是跟赋值联结在一起</p>
<p>比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">a = i++; <span class="comment">//将i的值赋值给a，即a=i；然后再执行i=i+1；也就是【a=i++;】与【a=i; i=i+1;】等价。</span></span><br><span class="line">a = ++i;<span class="comment">//将i+1的值赋给a,即a=i+1;然后再执行i=i+1；</span></span><br><span class="line">也就是[a=++i;]与[a=i+<span class="number">1</span>;i=i+<span class="number">1</span>;]等价。</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>前置 ++ 是将自身加 1 的值赋值给新变量，同时自身也加 1</li>
<li>后置 ++ 是将自身的值赋值给形变量，然后才自身加 1</li>
</ul>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><h3 id="基本运算符："><a href="#基本运算符：" class="headerlink" title="基本运算符："></a>基本运算符：</h3><table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>运算顺序</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>()、 []、 {}</td>
<td>从左向右</td>
</tr>
<tr>
<td>2</td>
<td>!、 +、 -、 ~、 ++、 –</td>
<td>从右向左</td>
</tr>
<tr>
<td>3</td>
<td>*、 /、 %</td>
<td>从左向右</td>
</tr>
<tr>
<td>4</td>
<td>+、 -</td>
<td>从左向右</td>
</tr>
<tr>
<td>5</td>
<td>«、 »、 &gt;&gt;&gt;</td>
<td>从左向右</td>
</tr>
<tr>
<td>6</td>
<td>&lt;、 &lt;=、 &gt;、 &gt;=、 instanceof</td>
<td>从左向右</td>
</tr>
<tr>
<td>7</td>
<td>==、 !=</td>
<td>从左向右</td>
</tr>
<tr>
<td>8</td>
<td>&amp;</td>
<td>从左向右</td>
</tr>
<tr>
<td>9</td>
<td>^</td>
<td>从左向右</td>
</tr>
<tr>
<td>10</td>
<td>|</td>
<td>从左向右</td>
</tr>
<tr>
<td>11</td>
<td>&amp;&amp;</td>
<td>从左向右</td>
</tr>
<tr>
<td>12</td>
<td>||</td>
<td>从左向右</td>
</tr>
<tr>
<td>13</td>
<td>?:</td>
<td>从右向左</td>
</tr>
<tr>
<td>14</td>
<td>= 以及所有复合等号（如+=、 -= 、 *=、 /=……）</td>
<td>从右向左</td>
</tr>
</tbody></table>
<h3 id="三元操作符："><a href="#三元操作符：" class="headerlink" title="三元操作符："></a>三元操作符：</h3><p>Condition? exression1 : expression2</p>
<p>当 Condition 为 true 时，计算或返回第一个表达式 expression1，</p>
<p>当 Condition 为 false 时,  则计算第二个表达式 expression2.<br>如 x &lt;y ? x: y<br>返回 x 和 y 中较小的那个值。</p>
<h2 id="数值类型之间的转换"><a href="#数值类型之间的转换" class="headerlink" title="数值类型之间的转换"></a>数值类型之间的转换</h2><p>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。转换过程中可能导致溢出或损失精度</p>
<table>
<thead>
<tr>
<th>低</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th>高</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>short</td>
<td>char</td>
<td>int</td>
<td>long</td>
<td>float</td>
<td>double</td>
</tr>
</tbody></table>
<h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>必须满足转换前的数据类型的位数要低于转换后的数据类型。</p>
<p>自动转换由低到高的顺序转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">123456789</span>;</span><br><span class="line"><span class="keyword">float</span> f = n; <span class="comment">//f的值为 1.234567892E8</span></span><br></pre></td></tr></table></figure>

<p>当使用上面两个数值进行二元操作时（例如 n+f , n 是整数，f 是浮点数），先要将两个操作数转换为同一种类型，然后再进行计算。</p>
<ul>
<li><p>如果两个操作数中有一个是 double 类型，另一个操作数就会转换为 double 类型；</p>
</li>
<li><p>否则，如果其中一个操作数是 float 类型，另一个操作数将会转换为 float 类型；</p>
</li>
<li><p>否则，如果其中一个操作数是 long 类型，另一个操作数将会转换为 long 类型。</p>
</li>
<li><p>否则，两个操作数都将被转换为 int 类型。</p>
</li>
</ul>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>高的向低的顺序转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">3.94</span>;</span><br><span class="line"><span class="keyword">int</span> y = (<span class="keyword">int</span>) x;</span><br></pre></td></tr></table></figure>

<p>x 的结果为 3，强制类型转换通过截断小数部分将浮点值转为整型。<br>如果想要四舍五入，得到最接近的整数。可以使用 Math.round 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> y = (<span class="keyword">int</span>)Math.round(x);</span><br></pre></td></tr></table></figure>

<p>结果为 4，当调用 round 时，仍然需要使用强制类型转换 (int). 其原理是因为 round 方法返回的结果为 long 类型。由于存在信息丢失的可能性，所以只有使用显式的强制类型转换才能够将 long 类型转换成 int 类型。</p>
<p>不要在 boolean 类型与任何类型之间进行强制类型转换，这样可以防止发生错误。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="子串-substring"><a href="#子串-substring" class="headerlink" title="子串 substring"></a>子串 substring</h3><p>String 类的 substring 方法可以从一个较大的字符串提取出一个子串。</p>
<p><code>substring(a,b)</code></p>
<ul>
<li>a 表示开始的位置（从 0 开始计数）</li>
<li>b 表示不想复制到的第一个位置</li>
</ul>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String greeting = <span class="string">"hello"</span>;</span><br><span class="line">String s = greeting.substring(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// s = hel</span></span><br><span class="line"><span class="comment">//从0开始计数，直到3位置，但是不包括3，所以返回 hel</span></span><br></pre></td></tr></table></figure>

<p>substring 的一个优点：容易计算子串的长度，长度为 b-a。<br>例如 hel 的长度为 3-0=3</p>
<h3 id="检测字符串是否相等"><a href="#检测字符串是否相等" class="headerlink" title="检测字符串是否相等"></a>检测字符串是否相等</h3><p>可以使用 equals 来检测两个字符串是否相等。</p>
<p><code>s.equals(t)</code></p>
<p>如果相等，会返回 true, 否则，返回 false. s 和 t 可以是字符串变量，也可以是字符串常量。<br>eg: “hello”.equals(greeting)</p>
<p>检测是否相等，而且不区分大小写，可以使用 equalsIgnoreCase 方法。<br>eg: “hello”.equalsIgnoreCase(“HeLLO)</p>
<p>不能使用 == 运算符来检测两个字符串是否相同，这个运算符只能够确定两个字符串是否放置在同一个位置。</p>
<h3 id="空串与-Null-串"><a href="#空串与-Null-串" class="headerlink" title="空串与 Null 串"></a>空串与 Null 串</h3><p>空串是一个 Java 对象，有自己的串长度 (0) 和内容 (空)。可以通过调用以下代码检查字符串是否为空。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(str.length()==<span class="number">0</span>)</span><br><span class="line">或</span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">""</span>))</span><br></pre></td></tr></table></figure>

<p><code>null</code>表示目前没有任何对象与该变量关联。可以通过调用以下代码检查字符串是否为 null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">要检测一个字符串既不是<span class="keyword">null</span>也不是空串：</span><br><span class="line"><span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length()!=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="length-与-charAt"><a href="#length-与-charAt" class="headerlink" title="length () 与 charAt ()"></a>length () 与 charAt ()</h3><p>length 方法会返回采用 UTF-16 编码表示的给定字符串所需的代码单元数量。<br>想要得到实际的长度，即代码点数量，可以调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xxx.codePointCount(<span class="number">0</span>,xxx.length())</span><br></pre></td></tr></table></figure>

<p>调用 s.chatAt (n) 将返回位置 n 的代码单元，n 介于 0~ s.length ()-1 之间。<br>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String greeting = <span class="string">"Hello"</span></span><br><span class="line"><span class="keyword">char</span> first = greeting.charAt(<span class="number">0</span>);    <span class="comment">// first is H</span></span><br><span class="line"><span class="keyword">char</span> last = greeting.charAt(<span class="number">4</span>);  <span class="comment">// last is o</span></span><br></pre></td></tr></table></figure>

<p>想得到 i 个的代码点，可以使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> index= greeting.offsetByCodePoints(<span class="number">0</span>,i);</span><br><span class="line"><span class="keyword">int</span> cp = greeting.codePonintAt(index);</span><br></pre></td></tr></table></figure>

<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h3><p>为了能够读取用户在控制台的输入，首先需要创建一个 Scanner 对象，并与 “标准输入流” System.in 关联。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;or <span class="keyword">import</span> java.util.*;</span><br><span class="line">***</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner (System.in)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>next()</strong></p>
<p>读取到输入有效的字符才会结束输入，对于输入有效的字符之前的空白会自动去掉，输入有效的字符之后的空白作为分隔符或者结束符。next () 不能得到带有空格的字符串。</p>
</li>
<li><p><strong>nextLine()</strong></p>
<p>以 enter 为结束符，nextLine () 可以得到带有空格的字符串，不会去掉空白，会全盘输出。</p>
</li>
<li><p><strong>nextInt()</strong></p>
<p>得到 int 类型的数据， nextDouble(), nextFloat() 同理。</p>
</li>
<li><p><strong>boolean hasNext()</strong></p>
<p>检测输入中是否还有其他数据。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Input_and_Output</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"what is your name :"</span>);</span><br><span class="line">        String name = in.nextLine();</span><br><span class="line">        System.out.print(<span class="string">"age :"</span>);</span><br><span class="line">        <span class="keyword">int</span> age = in.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"the name is "</span> + name + <span class="string">",the age is "</span>+age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入结果：</span></span><br><span class="line"><span class="comment">//what is your name :MagiDragon</span></span><br><span class="line"><span class="comment">//age :19</span></span><br><span class="line"><span class="comment">//the name is MagiDragon,the age is 19</span></span><br></pre></td></tr></table></figure>

<h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>System.out.print (x) 会将以 x 对应的数据类型所允许的最大非 0 数字位数打印输出 x</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">10000.0</span>/<span class="number">3.0</span>;</span><br><span class="line">System.out.print(x);  <span class="comment">// x = 3333.3333333333335</span></span><br></pre></td></tr></table></figure>

<p>为了能够方便格式输出结果，可以使用 printf ()。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">10000.0</span>/<span class="number">3.0</span>;</span><br><span class="line">System.out.printf(<span class="string">"8.2f"</span>,x);</span><br><span class="line"><span class="comment">// x = 3333.33 使用8个字符的宽度和小数点后两位字符的精度打印x</span></span><br><span class="line"><span class="comment">// 因为小数点后2位，为3333.33。但是指定要8个字符的宽度，所以左边会补一个空格</span></span><br><span class="line"><span class="comment">// x结果为（1个空格）3333.33</span></span><br></pre></td></tr></table></figure>

<p>用于 printf 的转换符</p>
<table>
<thead>
<tr>
<th align="center">转换符</th>
<th align="center">类型</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%s</td>
<td align="center">字符串类型</td>
<td align="center">“Hello”</td>
</tr>
<tr>
<td align="center">%c</td>
<td align="center">字符类型</td>
<td align="center">‘H’</td>
</tr>
<tr>
<td align="center">%b</td>
<td align="center">布尔类型</td>
<td align="center">true or false</td>
</tr>
<tr>
<td align="center">%d</td>
<td align="center">整数类型（十进制）</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">%x</td>
<td align="center">整数类型（十六进制）</td>
<td align="center">9f</td>
</tr>
<tr>
<td align="center">%o</td>
<td align="center">整数类型（八进制）</td>
<td align="center">237</td>
</tr>
<tr>
<td align="center">%f</td>
<td align="center">浮点类型</td>
<td align="center">15.9</td>
</tr>
<tr>
<td align="center">%a</td>
<td align="center">十六进制浮点类型</td>
<td align="center">0xcccc</td>
</tr>
<tr>
<td align="center">%e</td>
<td align="center">指数类型</td>
<td align="center">6.23e+24</td>
</tr>
<tr>
<td align="center">%g</td>
<td align="center">通用浮点类型（f 和 e 类型中较短的）</td>
<td align="center">42.5000</td>
</tr>
<tr>
<td align="center">%h</td>
<td align="center">散列码</td>
<td align="center">42628b2</td>
</tr>
<tr>
<td align="center">%%</td>
<td align="center">百分比类型</td>
<td align="center">%</td>
</tr>
<tr>
<td align="center">%n</td>
<td align="center">换行符</td>
<td align="center">相当于 \n</td>
</tr>
<tr>
<td align="center">%tx</td>
<td align="center">日期与时间类型（x 代表不同的日期与时间转换符）</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h3><p>如果基本的整数和浮点数精度不够满足需求，那么可以使用 java.math 包中的两个很有用的类：<strong>BigInteger</strong> 和 <strong>BigDecimal</strong>。这两个类可以处理包含任意长度数字序列的数值。</p>
<ul>
<li>BigInteger 实现任意精度的整数运算</li>
<li>BigDecimal 实现任意精度的浮点数运算</li>
</ul>
<p>把普通的数值转换成大数值，可以使用静态的 <strong>valueOf ()</strong> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigInteger a = BigInteger.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>大数值的运算不能使用常用的算术运算符（如 +，*）处理，而是要使用大数值类中的 <code>add</code> 和 <code>multiply</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigInteger c = a.add(b); <span class="comment">// c=a+b</span></span><br><span class="line">BigInteger d = c.multiply(b.add(BigInteger.valueOf(<span class="number">2</span>))); <span class="comment">// d = c*(b+2)</span></span><br></pre></td></tr></table></figure>

<p>其他的运算包括有 <code>subtract(减)</code>，<code>divide(除)</code> 和 <code>mod(余数)</code></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h3><p>数组是一种数据结构，用来存储同一类值得集合</p>
<p>数组声明方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array 或者 <span class="keyword">int</span> array[]</span><br></pre></td></tr></table></figure>

<p>数值初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span>[] arry = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>

<p>创建一个数字数组时，所有的元素都初始化为 0。<br>boolean 数组的元素会初始化为 false<br>对象数组的元素会初始化为一个特殊值 null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span>[] test = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;test.length;i++) &#123;</span><br><span class="line">  System.out.println(test[i]);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出的结果会是： 0 0 0 0 0</p>
<p>重要：<br>一旦创据数组，就不能再改变数组的大小。如果需要在运行中扩展数组的大小，则需要使用另一种数据结构 —— 数组列表（array list)</p>
<h3 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for each循环"></a>for each循环</h3><p>Java 有一种很强的循环结构，可以用来依次处理数组中的每个元素而不必为指定下标值而分心。</p>
<p>格式：</p>
<p><code>for(variable:collection) statement</code></p>
<p>定义一个变量用于暂存集合中的每一个元素，并执行相应的语句。</p>
<p>collection 这一集合表达式必须必须是一个数组或者是一个实现了 Iterable 接口的类对象（例如 Arraylist)。</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> element ：a)</span><br><span class="line">  System.out.println(element)  </span><br><span class="line">  <span class="comment">//打印数组a的每一个元素，一个元素佔一行</span></span><br><span class="line">  <span class="comment">// for each element in a</span></span><br></pre></td></tr></table></figure>

<h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><p>在 java 中，允许将一个数组变量拷贝到给另一个数组变量。这时，两个变量将引用同一个数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] b = a;</span><br><span class="line">a[<span class="number">5</span>] = <span class="number">12</span> <span class="comment">// b[2] = 12</span></span><br></pre></td></tr></table></figure>

<p>如果想将一个数组的所有值拷贝到一个新的数组去，使用 Arrays 类的 copyTo 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] copieda = Arrays.copyTo(a,a.length);</span><br></pre></td></tr></table></figure>

<p>第二个参数是新数组的长度，可以通过这个方法来增加数组的大小。<br>如: <code>Arrays.copyTo(a,2*a.length);</code> 增加到 2 倍大<br>如果数组元素是数字数组时，多余的元素都赋值为 0。<br>如果数组元素是 boolean 数组，多余的元素会赋值为 false<br>如果数组元素是对象数组的元素，多余的元素赋值为特殊值 null<br>如果长度小于原始数组的长度，则只拷贝前面的数据元素</p>
<h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><p>想要对数组排序，可以使用 Arrays 类的 sort 方法 <code>Arrays.sort(数组a)</code></p>
<p>抽奖游戏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LotteryDrawing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//抽奖游戏，设置总数n和抽取的数k,随机抽取</span></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"how many numbers do you need to draw?"</span>);</span><br><span class="line">        <span class="keyword">int</span> k = in.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"what is the highest number you can draw?"</span>);</span><br><span class="line">        <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给 总数赋值</span></span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; numbers.length;i++) &#123;</span><br><span class="line">          numbers[i]= i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;result.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">int</span> r = (<span class="keyword">int</span>)(Math.random()*n); <span class="comment">//随机抽取</span></span><br><span class="line">          result[i] = numbers[r];    <span class="comment">//把抽取的值赋给result</span></span><br><span class="line"></span><br><span class="line">          numbers[r]=numbers[n-<span class="number">1</span>]; <span class="comment">//避免抽到相同的数，把最尾的值赋给被抽到的值</span></span><br><span class="line">          n--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(result); <span class="comment">//排序</span></span><br><span class="line">        System.out.println(<span class="string">"Bet the foolowing combination. It'll make you rich!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r:result)</span><br><span class="line">          System.out.println(r);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多维数组（矩阵）"><a href="#多维数组（矩阵）" class="headerlink" title="多维数组（矩阵）"></a>多维数组（矩阵）</h3><p>多维数组适用于表示表格或者更加复杂的排列方式。</p>
<h4 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h4><p>声明：<code>type arrayName</code>[][] 或者 <code>type[][] arrayName</code><br>初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- balance=<span class="keyword">new</span> <span class="keyword">double</span>[rownumber][columnNumber]</span><br><span class="line">- <span class="keyword">int</span>[][] abc = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>Java 语言中，由于把二维数组看作是数组的数组，数组空间不是连续分配的，所以不要求二维数组每一维的大小相同。</p>
<hr>
<h2 id="面向对象程序设计-OOP"><a href="#面向对象程序设计-OOP" class="headerlink" title="面向对象程序设计(OOP)"></a>面向对象程序设计(OOP)</h2><p>面向对象的程序由对象组成的，每个对象包含对用户公开的特定功能部分和隐藏的实现部分。<br>oop 将数据摆在第一位，然后考虑操作数据的算法。</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>要使用 OOP，要了解对象的三个主要特性：</p>
<ul>
<li>对象的行为 (behavior) ———— 可以对对象施加哪些操作，或可以对对象施加哪些方法？</li>
<li>对象的状态 (state) ———— 当施加那些方法时，对象如何响应？</li>
<li>对象标识 (identity) ———— 如何辨别具有相同行为与状态的不同对象？</li>
</ul>
<h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><ul>
<li>依赖 (“uses-a”)<br>如果一个类的方法操作另一个类的对象，我们就説一个类依赖另一个类</li>
<li>聚合 (“has-a”)<br>聚合意味着类 A 的对象包含类 B 的对象</li>
<li>继承 (“is-a”)<br>类 A 扩展类 B, 类 A 不但包含从类 B 继承的方法，还会拥有一些额外的功能</li>
</ul>
<h2 id="使用预定义类"><a href="#使用预定义类" class="headerlink" title="使用预定义类"></a>使用预定义类</h2><h3 id="对象与对象变量"><a href="#对象与对象变量" class="headerlink" title="对象与对象变量"></a>对象与对象变量</h3><p>要想使用对象，就必须首先构造对象，并指定其初始状态。然后，对对象应用方法。<br><code>构造器(constructor)</code> 用来构造新实例。构造器是一种特殊的方法，用来构造并初始化对象。</p>
<p>构造器的名字应与类名相同。<br>以 Date 类为例，Date 类的构造器名为 Date。构造一个 Date 对象，需要在构造器前面加上 new 操作符。<br><code>new Date()</code><br>这个表达式构造一个新对象，这个对象被初始化啊为当前的日期和时间。<br>为了让构造的对象能多次使用，将对象存放在一个变量<br><code>Date birthday = new Date()</code></p>
<p>下图显示了引用新构造的对象变量 birthday</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/Java_review_2_Create_a_new_object.jpg" alt=""></p>
<p>在对象与对象变量之间存在一个重要的区别。例如<br><strong>Date deadline</strong> //deadline doesn’t refer to any object<br>定义了一个对象变量 deadline，它可以引用 Date 类型的对象。<br>但是，变量 deadline 不是一个对象，实际上也没有引用对象。</p>
<br/>

<p>必须初始化变量 deadline, 有两个选择。一是用新构造的对象初始化这个变量<br><code>deadline = new Date()</code><br>二是让这个变量引用一个已存在的对象：<br><code>deadline = birthday</code><br>现在两个变量引用同一个对象</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/Java_review_2_references_the_same_object.jpg" alt=""></p>
<p>一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。<br>在 Java 中，任何对象变量的值都是对存储在另外一个地方的一个对象的引用</p>
<p><code>Date deadline = new Date()</code><br>表达式 new Date () 构造了一个 Date 类型的对象，并且它的值是对新创建对象的引用。这个引用存储在变量 deadline 中。</p>
<p>可以将对象变量设为 null, 表明这个对象变量目前没有引用任何对象。<br><code>deadline = null;</code></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
